
import maya.cmds as cmds
import math
from mtoa.core import createStandIn
from maya.common.ui import LayoutManager

import random

cmds.SetProject()

res = []
propres = []
setres = []
chares = []
sqres = []
allrefObj = []
verPath = ''
setPiece_path = cmds.workspace(fullName=True) + "/scenes/publish/assets/setPiece"
prop_path = cmds.workspace(fullName=True) + "/scenes/publish/assets/prop"
set_path = cmds.workspace(fullName=True) + "/scenes/publish/assets/set"
char_path = cmds.workspace(fullName=True) + "/scenes/publish/assets/character"
sequence_path = cmds.workspace(fullName=True) + "/scenes/publish/sequence/lng01"
dsStore = "DS_Store"

def findsetAss():    
   
    for path in os.listdir(setPiece_path):
    # check if current path is a file
        if os.path.isdir(os.path.join(setPiece_path, path)):
            res.append(path)
    print(res)
   
def finpropAss():    
   
    for path in os.listdir(prop_path):
    # check if current path is a file
        if os.path.isdir(os.path.join(prop_path, path)):
            propres.append(path)
    print(propres)

def finsetAss():    
   
    for path in os.listdir(set_path):
    # check if current path is a file
        if os.path.isdir(os.path.join(set_path, path)):
            setres.append(path)
    print(setres)

def fincharAss():    
   
    for path in os.listdir(char_path):
    # check if current path is a file
        if os.path.isdir(os.path.join(char_path, path)):
            chares.append(path)
    print(chares)

def findseqAss():    
   
    for path in os.listdir(sequence_path):
    # check if current path is a file
        if os.path.isdir(os.path.join(sequence_path, path)):
            sqres.append(path)
   
   
findsetAss()
finpropAss()
finsetAss()
fincharAss()
findseqAss()

 
def referAss(*args):
    assName = cmds.optionMenu(setpieceMenu, q= True, v = True)
    templist = []
    temp_path = setPiece_path + "\\" + assName + "\\model\\source\\"
    for tpath in os.listdir(temp_path):
    # check if current path is a file
        if os.path.isfile(os.path.join(temp_path, tpath)):
            templist.append(tpath)
    cmds.file(temp_path + templist[-1],  r=True)
    #print(templist)
   
def referpropAss(assName):
    templist = []
    temp_path = prop_path + "\\" + assName + "\\model\\source\\"
    for tpath in os.listdir(temp_path):
    # check if current path is a file
        if os.path.isfile(os.path.join(temp_path, tpath)):
            templist.append(tpath)
    cmds.file(temp_path + templist[-1],  r=True)
    #print(templist)

def refersetAss(assName):
    templist = []
    temp_path = set_path + "\\" + assName + "\\model\\"
    for tpath in os.listdir(temp_path):
    # check if current path is a file
        if os.path.isfile(os.path.join(temp_path, tpath)):
            templist.append(tpath)
    tempname = templist[-1].split(".")
    cmds.file(temp_path + templist[-1],  r=True, namespace = tempname[0] + '_' + tempname[1])
    print(templist)
   
def refercharAss(assName):
    templist = []
    temp_path = char_path + "\\" + assName + "\\model\\cache\\fbx\\"
    for tpath in os.listdir(temp_path):
    # check if current path is a file
        if os.path.isfile(os.path.join(temp_path, tpath)):
            templist.append(tpath)
    cmds.file(temp_path + templist[-1],  r=True)
    #print(templist)

def referseqAss(*args):
    templist = []
    templist2 = []
    assName = cmds.optionMenu(seqMenu, q=True, v=True)
    temp_path = sequence_path + "\\" + assName + "\\animation\\cache\\alembic\\"
    temp_path2 = sequence_path + "\\" + assName + "\\layout\\cache\\alembic\\"
   
    refersetAss("loungeRoom")
   
    for tpath in os.listdir(temp_path):
    # check if current path is a file
        if os.path.isfile(os.path.join(temp_path, tpath)):
            templist.append(tpath)
    tempname = templist[-1].split(".")
    cmds.file(temp_path + templist[-1],  r=True, namespace = tempname[0] + '_' + tempname[1])
    for tpath2 in os.listdir(temp_path2):
    # check if current path is a file
        if os.path.isfile(os.path.join(temp_path2, tpath2)):
            templist2.append(tpath2)
    tempname2 = templist2[-1].split(".")
    cmds.file(temp_path2 + templist2[-1],  r=True, namespace = tempname2[0] + '_' + tempname2[1])
    #print(templist)

def unlockNode(*args):
    selection = cmds.ls(selection = True)
    for node in selection:
        cmds.lockNode(node, lock = False)


def checkFile(*args):
    if allrefObj is not None:
        allrefObj.clear()
        clearList(objMenu)
                
    refNodes = cmds.ls(rf = True)
    notinclRef = "mRefRN"
    for rNode in refNodes:
        if notinclRef not in rNode:
            allrefObj.append(rNode)
    for item in refObj:      
        cmds.menuItem( p=objMenu, label= str(item))
    print(allrefObj)


def replaceRefer(*args):
    refObj = cmds.ls(sl= True)
    refNamespace = str(refObj[0]).split('_v')
    ojPath = cmds.referenceQuery(refObj, filename = True)
    objfilePath = ojPath.rsplit('.')
    slverNo = cmds.optionMenu(verMenu, q = True, v = True)
    if ( "model" in objfilePath[0] ):
        csc = objfilePath[0] + '.v' + slverNo + '.mb'
    else:
        csc = objfilePath[0] + '.v' + slverNo + '.abc'
    cmds.file(csc, loadReference = str(refObj[0]))
    cmds.file(csc, e=1, namespace= refNamespace[0] + "_v" + slverNo)
    print (csc)


def verRefer(verNo):
    refObj = str(cmds.ls(sl= True))
    objverName = cmds.referenceQuery(selected, ns = True, shortName=True).split('_v')
    cmds.file(verPath + verNo + '.' + 'abc', loadReference = 'lng01_010_anim_v003RN')
    cmds.file(verPath + verNo + '.' + 'abc', e=1, namespace= objverName + 'verNo')

def checkVer(*args):
    tempverList = []
    cVer = []
    selected = cmds.ls(sl = True)
    objName = cmds.referenceQuery(selected, ns = True, shortName=True).split('_')
    if (objName[1] != 'model' ):
        seqName = objName[0] + '_' + objName[1]
        for sq in sqres:
            if (sq == seqName):
                if (objName[2] == 'anim'):
                    temp_path2 = sequence_path + "\\" + seqName + "\\animation\\cache\\alembic\\"    
                    verPath = temp_path2 + seqName + '_' + objName[2] + '.'                
                    for tpath2 in os.listdir(temp_path2):
                        if os.path.isfile(os.path.join(temp_path2, tpath2)):                            
                            if (dsStore not in tpath2):
                                tempverList.append(tpath2)
                elif (objName[2] == 'layout'):
                    temp_path2 = sequence_path + "\\" + seqName + "\\layout\\cache\\alembic\\"
                    verPath = temp_path2 + seqName + '_' + objName[2] + '.'                    
                    for tpath2 in os.listdir(temp_path2):
                        if os.path.isfile(os.path.join(temp_path2, tpath2)):                            
                            if (dsStore not in tpath2):
                                tempverList.append(tpath2)
    else:
        temp_path3 = set_path + '/loungeRoom/model/'
        for tpath3 in os.listdir(temp_path3):
            if os.path.isfile(os.path.join(temp_path3, tpath3)):                            
                if (dsStore not in tpath3):
                    tempverList.append(tpath3)
                   
    for vList in tempverList:
        aVer = vList.split('.')
        nVer = aVer[-2].split('v')
        cVer.append(nVer[-1])
       
    #cmds.menuItem( label= "None")
   
    if (verMenu is not None):
        clearList(verMenu)
       
    changeTextFld()  
    for item in cVer:
        print(item)      
        cmds.menuItem( p=verMenu, label= str(item))    
               

def clearList(dlMenu):
    menuItems = cmds.optionMenu(dlMenu, q=True, itemListLong=True) # itemListLong returns the children
    if menuItems:
        cmds.deleteUI(menuItems)

def changeTextFld(*args):
    selected = cmds.ls(sl = True)
    cmds.textField('curobjText', edit=True, tx=selected[0])

#Window   
if cmds.window('cTools', exists = True):
        cmds.deleteUI('cTools')
       
cmds.window('cTools', title='Shader Tool', widthHeight = (250, 300), sizeable = False, resizeToFitChildren = True)
with LayoutManager(cmds.columnLayout(adj=True, rowSpacing=5)) as col:   
    cmds.separator(h=10)
    cmds.text("BUILD LIGHTING SCENE", font="boldLabelFont")
    cmds.separator(h=10)        

    seqMenu = cmds.optionMenu(w = 300, label='Seq')
    cmds.optionMenu( seqMenu, edit=1)
    cmds.menuItem( label= "None")
   
    for item in sqres:      
        cmds.menuItem( label= str(item))

    cmds.button(label = 'Create Lighting Scene', command = referseqAss)  
 
    cmds.separator(h=20)
    cmds.text('Versions Control', font="boldLabelFont")
    cmds.button(label = 'Get selected reference versions', command = checkVer)
    
    #Select and find versions available for the selecting obj

    cmds.textField('curobjText', w = 250, text='None', editable=False )
    verMenu = cmds.optionMenu(label='Available Versions')
        
    cmds.button(label = 'Update selected reference node', command = replaceRefer)
    cmds.separator(h=20)
    cmds.text('Update Check', font="boldLabelFont")
    cmds.button(label = 'Check all reference update', command = checkFile)
    objMenu = cmds.optionMenu(w = 300, label='All referenced node in scene')
    cmds.optionMenu( objMenu, edit=1)      
    cmds.button(label = 'Update selected only')
    cmds.button(label = 'Update All')
    cmds.separator(h=20)
    cmds.text('Load Other Assets (additional)', font="boldLabelFont")
    setpieceMenu = cmds.optionMenu(w = 300, label='Set Piece')
    cmds.optionMenu( setpieceMenu, edit=1)
    cmds.menuItem( label= "None")
   
    for item in res:      
        cmds.menuItem( label= str(item))
    cmds.button(label = 'Load Asset (Latest)', command = referAss)    
    cmds.separator(h=20)
    
cmds.showWindow('cTools')        
